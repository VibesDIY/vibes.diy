 app/app.css                                        |  53 +++-
 app/components/AppLayout.tsx                       |  26 +-
 app/components/ChatHeader.tsx                      |   2 +-
 app/components/ChatHeaderContent.tsx               |  76 ++++++
 app/components/ChatInterface.tsx                   |  65 ++---
 app/components/MessageList.tsx                     |  18 +-
 app/components/QuickSuggestions.tsx                |   2 +-
 app/components/ResultPreview/ResultPreview.tsx     |  40 ++-
 .../ResultPreview/ResultPreviewHeaderContent.tsx   | 155 +++++++++++
 .../ResultPreview/ResultPreviewTemplates.ts        |   4 +-
 .../ResultPreview/ResultPreviewToolbar.tsx         |   2 +-
 app/components/ResultPreview/ResultPreviewTypes.ts |   5 +-
 app/components/ResultPreview/SandpackContent.tsx   |  39 ++-
 .../ResultPreview/SandpackScrollController.tsx     | 288 +++++++++------------
 app/components/ResultPreview/WelcomeScreen.tsx     |   2 +-
 app/components/StructuredMessage.tsx               |   2 +-
 app/hooks/useSimpleChat.ts                         |   5 +
 app/prompts.ts                                     |   2 +-
 app/routes/home.tsx                                |  49 +++-
 app/types/chat.ts                                  |   2 +
 20 files changed, 588 insertions(+), 249 deletions(-)
diff --git a/app/app.css b/app/app.css
index 7d7e885..0e5febf 100644
--- a/app/app.css
+++ b/app/app.css
@@ -263,7 +263,7 @@ a,
 .pulsing {
   width: 100%;
   height: auto;
-  transform: rotate(-5deg) scale(4);
+  transform: rotate(-5deg) scale(6);
   animation: pulse 8s infinite;
 }
 
@@ -280,7 +280,7 @@ a,
 }
 .logo-pulse {
   transform: rotate(-5deg) scale(4);
-  animation: logo-rotate 30s ease-in-out infinite;
+  animation: logo-rotate 33s ease-in-out infinite, logo-pulse-height 21s ease-in-out infinite;
 }
 
 @keyframes logo-rotate {
@@ -294,3 +294,52 @@ a,
     transform: rotate(0deg) scale(1);
   }
 }
+
+@keyframes logo-pulse-height {
+  0% {
+    width: 80%;
+  }
+  50% {
+    width: 120%;
+  }
+  100% {
+    width: 80%;
+  }
+}
+
+.ai-markdown ul {
+  list-style-type: disc;
+  padding-left: 1rem;
+  padding-top: 0.5rem;
+}
+
+.ai-markdown ol {
+  list-style-type: decimal;
+  padding-left: 1rem;
+  padding-top: 0.5rem;
+}
+
+.ai-markdown li {
+  margin-bottom: 0.5rem;
+}
+
+.ai-markdown h1 {
+  font-size: 1.8rem;
+  font-weight: 700;
+  margin-top: 1rem;
+  margin-bottom: 1rem;
+}
+
+.ai-markdown h2 {
+  font-size: 1.5rem;
+  font-weight: 600;
+  margin-top: 1rem;
+  margin-bottom: 0.75rem;
+}
+
+.ai-markdown h3 {
+  font-size: 1.25rem;
+  font-weight: 600;
+  margin-top: 0.75rem;
+  margin-bottom: 0.5rem;
+}
diff --git a/app/components/AppLayout.tsx b/app/components/AppLayout.tsx
index 7bb7d61..3f7dbb8 100644
--- a/app/components/AppLayout.tsx
+++ b/app/components/AppLayout.tsx
@@ -3,17 +3,35 @@ import type { ReactNode } from 'react';
 interface AppLayoutProps {
   chatPanel: ReactNode;
   previewPanel: ReactNode;
+  headerLeft?: ReactNode;
+  headerRight?: ReactNode;
 }
 
 /**
  * AppLayout - Common layout component for the application
  * Provides consistent structure with 1:3 ratio between chat panel and preview panel
+ * Can optionally render header components above the content panels
  */
-export default function AppLayout({ chatPanel, previewPanel }: AppLayoutProps) {
+export default function AppLayout({ 
+  chatPanel, 
+  previewPanel, 
+  headerLeft, 
+  headerRight 
+}: AppLayoutProps) {
   return (
-    <div className="flex h-dvh overflow-hidden">
-      <div className="flex h-full w-1/3 flex-col">{chatPanel}</div>
-      <div className="relative w-2/3">{previewPanel}</div>
+    <div className="flex h-dvh flex-col overflow-hidden">
+      <div className="flex h-[4rem] w-full border-b border-light-decorative-00 dark:border-dark-decorative-00">
+        <div className="w-1/3 border-light-decorative-00 dark:border-dark-decorative-00">
+          {headerLeft}
+        </div>
+        <div className="w-2/3">
+          {headerRight}
+        </div>
+      </div>
+      <div className="flex flex-1 overflow-hidden">
+        <div className="flex h-full w-1/3 flex-col">{chatPanel}</div>
+        <div className="relative w-2/3">{previewPanel}</div>
+      </div>
     </div>
   );
 }
diff --git a/app/components/ChatHeader.tsx b/app/components/ChatHeader.tsx
index b75e71c..93aaeb2 100644
--- a/app/components/ChatHeader.tsx
+++ b/app/components/ChatHeader.tsx
@@ -10,7 +10,7 @@ function ChatHeader({ onOpenSidebar, title }: ChatHeaderProps) {
   const navigate = useNavigate();
 
   return (
-    <div className="border-light-decorative-00 dark:border-dark-decorative-00 bg-light-background-00 dark:bg-dark-background-00 flex min-h-[4rem] items-center justify-between border-b px-6 py-4">
+    <div className="border-light-decorative-00 dark:border-dark-decorative-00 bg-light-background-00 dark:bg-dark-background-00 flex h-[4rem] items-center justify-between border-b px-6 py-4">
       <div className="flex items-center">
         <button
           type="button"
diff --git a/app/components/ChatHeaderContent.tsx b/app/components/ChatHeaderContent.tsx
new file mode 100644
index 0000000..6d18b9c
--- /dev/null
+++ b/app/components/ChatHeaderContent.tsx
@@ -0,0 +1,76 @@
+import { memo } from 'react';
+
+interface ChatHeaderContentProps {
+  onOpenSidebar: () => void;
+  title: string;
+}
+
+function ChatHeaderContent({ onOpenSidebar, title }: ChatHeaderContentProps) {
+  return (
+    <div className="flex h-full w-full items-center justify-between px-6 py-4">
+      <div className="flex items-center">
+        <button
+          type="button"
+          onClick={onOpenSidebar}
+          className="text-light-primary dark:text-dark-primary hover:text-accent-02-light dark:hover:text-accent-02-dark mr-3"
+          aria-label="Open chat history"
+        >
+          <svg
+            xmlns="http://www.w3.org/2000/svg"
+            className="h-6 w-6"
+            fill="none"
+            viewBox="0 0 24 24"
+            stroke="currentColor"
+            aria-hidden="true"
+          >
+            <path
+              strokeLinecap="round"
+              strokeLinejoin="round"
+              strokeWidth={2}
+              d="M4 6h16M4 12h16M4 18h7"
+            />
+          </svg>
+        </button>
+      </div>
+      <div className="text-light-primary dark:text-dark-primary text-sm">{title}</div>
+      <div className="relative">
+        <button
+          type="button"
+          onClick={() => {
+            document.location = '/';
+          }}
+          className="peer bg-accent-02-light dark:bg-accent-02-dark hover:bg-accent-03-light dark:hover:bg-accent-03-dark flex cursor-pointer items-center justify-center rounded-full p-2.5 text-white transition-colors"
+          aria-label="New Chat"
+          title="New Chat"
+        >
+          <span className="sr-only">New Chat</span>
+          <svg
+            xmlns="http://www.w3.org/2000/svg"
+            className="h-5 w-5"
+            fill="none"
+            viewBox="0 0 24 24"
+            stroke="currentColor"
+            aria-hidden="true"
+          >
+            <path
+              strokeLinecap="round"
+              strokeLinejoin="round"
+              strokeWidth={2}
+              d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
+            />
+          </svg>
+        </button>
+        <span className="pointer-events-none absolute top-full right-0 mt-1 rounded bg-gray-800 px-2 py-1 text-sm whitespace-nowrap text-white opacity-0 transition-opacity peer-hover:opacity-100">
+          New Chat
+        </span>
+      </div>
+    </div>
+  );
+}
+
+// Use React.memo with a custom comparison function to ensure the component only
+// re-renders when its props actually change
+export default memo(ChatHeaderContent, (prevProps, nextProps) => {
+  // Only re-render if title or onOpenSidebar changes
+  return prevProps.onOpenSidebar === nextProps.onOpenSidebar && prevProps.title === nextProps.title;
+}); 
\ No newline at end of file
diff --git a/app/components/ChatInterface.tsx b/app/components/ChatInterface.tsx
index dea3b6c..42b90d4 100644
--- a/app/components/ChatInterface.tsx
+++ b/app/components/ChatInterface.tsx
@@ -2,11 +2,15 @@ import { useState, useMemo, useCallback, useRef } from 'react';
 import type { ChangeEvent } from 'react';
 import type { ChatState } from '../types/chat';
 import SessionSidebar from './SessionSidebar';
-import ChatHeader from './ChatHeader';
 import MessageList from './MessageList';
 import ChatInput from './ChatInput';
 import QuickSuggestions from './QuickSuggestions';
 
+interface ChatInterfaceProps extends ChatState {
+  isSidebarVisible: boolean;
+  setIsSidebarVisible: (isVisible: boolean) => void;
+}
+
 function ChatInterface({
   docs: messages,
   input,
@@ -16,24 +20,20 @@ function ChatInterface({
   sendMessage,
   sessionId,
   title,
-}: ChatState) {
+  codeReady,
+  addScreenshot,
+  isSidebarVisible,
+  setIsSidebarVisible,
+}: ChatInterfaceProps) {
   // State for UI transitions and sharing
   const [isShrinking, setIsShrinking] = useState(false);
   const [isExpanding, setIsExpanding] = useState(false);
-  const [isSidebarVisible, setIsSidebarVisible] = useState(false);
   const [selectedResponseId, setSelectedResponseId] = useState<string | null>(null);
 
-  // Convert docs to messages
-  // const messages = useMemo(() => convertDocsToMessages(docs), [docs]);
-
-  // Sidebar visibility functions
-  const openSidebar = useCallback(() => {
-    setIsSidebarVisible(true);
-  }, []);
-
+  // Sidebar visibility function
   const closeSidebar = useCallback(() => {
     setIsSidebarVisible(false);
-  }, []);
+  }, [setIsSidebarVisible]);
 
   // Function to handle input changes
   const handleInputChange = useCallback(
@@ -87,28 +87,33 @@ function ChatInterface({
         setSelectedResponseId={handleSetSelectedResponseId}
       />
     );
-  }, [sessionId, messages, isStreaming, isShrinking, isExpanding, handleSetSelectedResponseId]);
+  }, [messages, isStreaming, isShrinking, isExpanding, handleSetSelectedResponseId]);
 
   return (
-    <div className="flex h-screen flex-col">
-      <ChatHeader onOpenSidebar={openSidebar} title={title} />
-      <div className="flex flex-1 overflow-hidden">
-        <div className="flex w-full flex-1 flex-col">
+    <div className="flex h-full flex-col overflow-hidden bg-light-background-01 dark:bg-dark-background-01">
+      {messages.length > 0 ? (
+        <div className="flex-grow overflow-y-auto flex flex-col-reverse">
           {memoizedMessageList}
-          {messages.length === 0 && (
-            <QuickSuggestions onSelectSuggestion={handleSelectSuggestion} />
-          )}
-          <ChatInput
-            value={input}
-            onChange={handleInputChange}
-            onKeyDown={handleKeyDown}
-            onSend={sendMessage}
-            disabled={isStreaming}
-            inputRef={inputRef}
-          />
         </div>
-      </div>
-      <SessionSidebar isVisible={isSidebarVisible} onClose={closeSidebar} />
+      ) : (
+        <div className="flex flex-col justify-between flex-grow">
+          <div className="flex-grow"></div>
+          <QuickSuggestions onSelectSuggestion={handleSelectSuggestion} />
+        </div>
+      )}
+      <ChatInput
+        value={input}
+        onChange={handleInputChange}
+        onKeyDown={handleKeyDown}
+        onSend={sendMessage}
+        disabled={isStreaming}
+        inputRef={inputRef}
+      />
+      <SessionSidebar 
+        isVisible={isSidebarVisible} 
+        onClose={closeSidebar} 
+        sessionId={sessionId || ''} 
+      />
     </div>
   );
 }
diff --git a/app/components/MessageList.tsx b/app/components/MessageList.tsx
index 6f7c4b4..b5ff2b8 100644
--- a/app/components/MessageList.tsx
+++ b/app/components/MessageList.tsx
@@ -1,4 +1,4 @@
-import { useEffect, useRef, memo, useMemo } from 'react';
+import { memo, useMemo } from 'react';
 import Message, { WelcomeScreen } from './Message';
 import type { ChatMessageDocument } from '../types/chat';
 
@@ -17,8 +17,6 @@ function MessageList({
   isExpanding = false,
   setSelectedResponseId,
 }: MessageListProps) {
-  const messagesEndRef = useRef<HTMLDivElement>(null);
-
   const messageElements = useMemo(() => {
     return messages.map((msg, i) => {
       return (
@@ -34,22 +32,11 @@ function MessageList({
     });
   }, [messages, isShrinking, isExpanding, isStreaming, setSelectedResponseId]);
 
-  useEffect(() => {
-    try {
-      if (messagesEndRef.current && typeof messagesEndRef.current.scrollIntoView === 'function') {
-        messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
-      }
-    } catch (error) {
-      console.error('Error scrolling:', error);
-    }
-  }, [messages, isStreaming]);
-
   return (
     <div
-      className={`flex-1 overflow-y-auto bg-light-background-01 dark:bg-dark-background-01 ${
+      className={`flex-1 ${
         isShrinking ? 'animate-width-shrink' : isExpanding ? 'animate-width-expand' : ''
       }`}
-      ref={messagesEndRef}
     >
       <div className="mx-auto flex min-h-full max-w-5xl flex-col py-4">
         {messages.length === 0 && !isStreaming ? (
@@ -57,7 +44,6 @@ function MessageList({
         ) : (
           <div className="flex flex-col space-y-4">
             {messageElements}
-            <div ref={messagesEndRef} />
           </div>
         )}
       </div>
diff --git a/app/components/QuickSuggestions.tsx b/app/components/QuickSuggestions.tsx
index 3b85d25..80cbabe 100644
--- a/app/components/QuickSuggestions.tsx
+++ b/app/components/QuickSuggestions.tsx
@@ -39,7 +39,7 @@ function QuickSuggestions({ onSelectSuggestion }: QuickSuggestionsProps) {
   ];
 
   return (
-    <div className="bg-light-background-01 dark:bg-dark-background-01 px-4 py-3">
+    <div className="px-4 py-3">
       <div className="flex flex-wrap gap-2">
         {suggestions.map((suggestion, index) => (
           <button
diff --git a/app/components/ResultPreview/ResultPreview.tsx b/app/components/ResultPreview/ResultPreview.tsx
index fd880db..04bb7f9 100644
--- a/app/components/ResultPreview/ResultPreview.tsx
+++ b/app/components/ResultPreview/ResultPreview.tsx
@@ -4,41 +4,46 @@ import type { SandpackFiles } from './ResultPreviewTypes';
 import { indexHtml, animationStyles } from './ResultPreviewTemplates';
 import { processCodeForDisplay } from './ResultPreviewUtils';
 import WelcomeScreen from './WelcomeScreen';
-import ResultPreviewToolbar from './ResultPreviewToolbar';
 import SandpackContent from './SandpackContent';
 
 function ResultPreview({
   code,
   dependencies = {},
   onScreenshotCaptured,
-  initialView = 'code',
   sessionId,
   isStreaming = false,
+  codeReady = false,
+  activeView,
+  setActiveView,
+  onPreviewLoaded,
 }: ResultPreviewProps) {
-  const [activeView, setActiveView] = useState<'preview' | 'code'>(initialView);
   const [bundlingComplete, setBundlingComplete] = useState(true);
   const [previewReady, setPreviewReady] = useState(false);
 
   const filesRef = useRef<SandpackFiles>({});
-  const showWelcome = !code || code.length === 0;
+  const showWelcome = !isStreaming && (!code || code.length === 0);
 
   const sandpackKey = useMemo(() => {
     if (showWelcome) return `${sessionId || 'default'}-welcome`;
     return `${sessionId || 'default'}-${isStreaming ? 'streaming' : 'static'}-${code}`;
-  }, [sessionId, isStreaming, code, showWelcome]);
+  }, [sessionId, codeReady, code, showWelcome]);
 
   useEffect(() => {
     if (isStreaming) {
+      // Reset to code view when streaming starts
       setActiveView('code');
     }
-  }, [isStreaming]); 
+  }, [isStreaming, setActiveView]);
 
   useEffect(() => {
     const handleMessage = ({ data }: MessageEvent) => {
       if (data) {
         if (data.type === 'preview-loaded') {
           setPreviewReady(true);
+          // Automatically switch to preview view when it's ready
           setActiveView('preview');
+          // Notify parent component that preview is loaded
+          onPreviewLoaded();
         } else if (data.type === 'screenshot' && data.data) {
           console.log('ResultPreview: Received screenshot');
           if (onScreenshotCaptured) {
@@ -47,9 +52,12 @@ function ResultPreview({
         }
       }
     };
+
     window.addEventListener('message', handleMessage);
-    return () => window.removeEventListener('message', handleMessage);
-  }, [onScreenshotCaptured]);
+    return () => {
+      window.removeEventListener('message', handleMessage);
+    };
+  }, [onScreenshotCaptured, setActiveView, onPreviewLoaded]);
 
   useEffect(() => {
     if (!showWelcome) {
@@ -65,7 +73,7 @@ function ResultPreview({
   }, [code, showWelcome]);
 
   const previewArea = showWelcome ? (
-    <div className="h-full" style={{ height: 'calc(100vh - 49px)' }}>
+    <div className="h-full">
       <WelcomeScreen />
     </div>
   ) : (
@@ -86,7 +94,8 @@ function ResultPreview({
         <SandpackContent
           activeView={activeView}
           filesContent={filesRef.current}
-          isStreaming={isStreaming}
+          isStreaming={!codeReady}
+          codeReady={codeReady}
           sandpackKey={sandpackKey}
           setActiveView={setActiveView}
           setBundlingComplete={setBundlingComplete}
@@ -99,17 +108,6 @@ function ResultPreview({
   return (
     <div className="h-full" style={{ overflow: 'hidden' }}>
       <style>{animationStyles}</style>
-
-      <ResultPreviewToolbar
-        previewReady={previewReady}
-        activeView={activeView}
-        setActiveView={setActiveView}
-        bundlingComplete={bundlingComplete}
-        isStreaming={isStreaming}
-        code={code}
-        dependencies={dependencies}
-      />
-
       {previewArea}
     </div>
   );
diff --git a/app/components/ResultPreview/ResultPreviewHeaderContent.tsx b/app/components/ResultPreview/ResultPreviewHeaderContent.tsx
new file mode 100644
index 0000000..f5a4f2d
--- /dev/null
+++ b/app/components/ResultPreview/ResultPreviewHeaderContent.tsx
@@ -0,0 +1,155 @@
+import React, { useState } from 'react';
+import { copyToClipboard, encodeStateToUrl } from '../../utils/sharing';
+
+interface ResultPreviewHeaderContentProps {
+  previewReady: boolean;
+  activeView: 'preview' | 'code';
+  setActiveView: (view: 'preview' | 'code') => void;
+  bundlingComplete: boolean;
+  isStreaming: boolean;
+  code: string;
+  dependencies?: Record<string, string>;
+}
+
+const ResultPreviewHeaderContent: React.FC<ResultPreviewHeaderContentProps> = ({
+  previewReady,
+  activeView,
+  setActiveView,
+  bundlingComplete,
+  isStreaming,
+  code,
+  dependencies = {},
+}) => {
+  const [shareStatus, setShareStatus] = useState<string>('');
+
+  function handleShare() {
+    if (!code) {
+      alert('Generate an app first before sharing!');
+      return;
+    }
+
+    const encoded = encodeStateToUrl(code, dependencies);
+    if (encoded) {
+      copyToClipboard(`${window.location.origin}/shared?state=${encoded}`);
+      setShareStatus('Share URL copied to clipboard!');
+      setTimeout(() => {
+        setShareStatus('');
+      }, 3000);
+    }
+  }
+
+  const showSwitcher = code.length > 0;
+
+  return (
+    <div className="flex h-full w-full items-center justify-between px-6 py-4">
+      {showSwitcher ? (
+        <div className="bg-light-decorative-00 dark:bg-dark-decorative-00 flex space-x-1 rounded-lg p-1 shadow-sm">
+          <button
+            type="button"
+            disabled={!previewReady}
+            onClick={() => setActiveView('preview')}
+            className={`flex items-center space-x-1.5 rounded-md px-4 py-1.5 text-sm font-medium transition-colors ${
+              activeView === 'preview'
+                ? 'bg-light-background-00 dark:bg-dark-background-00 text-light-primary dark:text-dark-primary shadow-sm'
+                : 'text-light-primary dark:text-dark-primary' +
+                  (previewReady
+                    ? ' hover:bg-light-decorative-01 dark:hover:bg-dark-decorative-01'
+                    : ' cursor-not-allowed opacity-50')
+            }`}
+            aria-label="Switch to preview"
+          >
+            <svg
+              xmlns="http://www.w3.org/2000/svg"
+              className={`h-4 w-4 ${bundlingComplete && !previewReady ? 'animate-spin-slow' : ''}`}
+              fill="none"
+              viewBox="0 0 24 24"
+              stroke="currentColor"
+            >
+              <title>Preview icon</title>
+              <path
+                strokeLinecap="round"
+                strokeLinejoin="round"
+                strokeWidth={2}
+                d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
+              />
+              <path
+                strokeLinecap="round"
+                strokeLinejoin="round"
+                strokeWidth={2}
+                d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
+              />
+            </svg>
+            <span>Preview</span>
+          </button>
+          <button
+            type="button"
+            onClick={() => {
+              setActiveView('code');
+            }}
+            className={`flex items-center space-x-1.5 rounded-md px-4 py-1.5 text-sm font-medium transition-colors ${
+              activeView === 'code'
+                ? 'bg-light-background-00 dark:bg-dark-background-00 text-light-primary dark:text-dark-primary shadow-sm'
+                : 'text-light-primary dark:text-dark-primary hover:bg-light-decorative-01 dark:hover:bg-dark-decorative-01'
+            }`}
+            aria-label="Switch to code editor"
+          >
+            <svg
+              xmlns="http://www.w3.org/2000/svg"
+              className="h-4 w-4"
+              fill="none"
+              viewBox="0 0 24 24"
+              stroke="currentColor"
+            >
+              <title>Code icon</title>
+              <path
+                strokeLinecap="round"
+                strokeLinejoin="round"
+                strokeWidth={2}
+                d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"
+              />
+            </svg>
+            <span>Code</span>
+          </button>
+        </div>
+      ) : (
+        <div className="h-10"></div>
+      )}
+      {code ? (
+        <div className="flex items-center gap-2">
+          {shareStatus && (
+            <span className="text-sm text-green-600 dark:text-green-400">{shareStatus}</span>
+          )}
+          <div className="bg-light-decorative-00 dark:bg-dark-decorative-00 flex space-x-1 rounded-lg p-1 shadow-sm">
+            <button
+              type="button"
+              onClick={handleShare}
+              className="text-light-primary dark:text-dark-primary hover:bg-light-decorative-01 dark:hover:bg-dark-decorative-01 flex items-center space-x-1.5 rounded-md px-4 py-1.5 text-sm font-medium transition-colors"
+              aria-label="Share app"
+            >
+              <svg
+                xmlns="http://www.w3.org/2000/svg"
+                className="h-4 w-4"
+                fill="none"
+                viewBox="0 0 24 24"
+                stroke="currentColor"
+              >
+                <title>Share icon</title>
+                <path
+                  strokeLinecap="round"
+                  strokeLinejoin="round"
+                  strokeWidth={2}
+                  d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"
+                />
+              </svg>
+              <span>Share</span>
+            </button>
+          </div>
+        </div>
+      ) : (
+        <div className="h-10 w-10"></div>
+      )}
+    </div>
+  );
+};
+
+export default ResultPreviewHeaderContent; 
\ No newline at end of file
diff --git a/app/components/ResultPreview/ResultPreviewTemplates.ts b/app/components/ResultPreview/ResultPreviewTemplates.ts
index c6439be..561dbc9 100644
--- a/app/components/ResultPreview/ResultPreviewTemplates.ts
+++ b/app/components/ResultPreview/ResultPreviewTemplates.ts
@@ -48,7 +48,7 @@ export const indexHtml = `<!DOCTYPE html>
       }
 
       function pageIsLoaded() {
-\        window.parent.postMessage({ type: 'preview-loaded' }, '*');
+        window.parent.postMessage({ type: 'preview-loaded' }, '*');
         setTimeout(captureScreenshot, 100);
       }
 
@@ -68,7 +68,7 @@ export const indexHtml = `<!DOCTYPE html>
       });
     </script>
   </head>
-  <body>
+  <body style="margin-bottom: 20px;">
     <div id="root"></div>
     <script type="module" src="/index.jsx"></script>
   </body>
diff --git a/app/components/ResultPreview/ResultPreviewToolbar.tsx b/app/components/ResultPreview/ResultPreviewToolbar.tsx
index 869ee62..a3d8ac3 100644
--- a/app/components/ResultPreview/ResultPreviewToolbar.tsx
+++ b/app/components/ResultPreview/ResultPreviewToolbar.tsx
@@ -41,7 +41,7 @@ const ResultPreviewToolbar: React.FC<ResultPreviewToolbarProps> = ({
   const showSwitcher = code.length > 0;
 
   return (
-    <div className="border-light-decorative-00 dark:border-dark-decorative-00 bg-light-background-00 dark:bg-dark-background-00 flex min-h-[4rem] items-center justify-between border-b px-6 py-4">
+    <div className="border-light-decorative-00 dark:border-dark-decorative-00 bg-light-background-00 dark:bg-dark-background-00 flex h-[4rem] items-center justify-between border-b px-6 py-4">
       {showSwitcher ? (
         <div className="bg-light-decorative-00 dark:bg-dark-decorative-00 flex space-x-1 rounded-lg p-1 shadow-sm">
           <button
diff --git a/app/components/ResultPreview/ResultPreviewTypes.ts b/app/components/ResultPreview/ResultPreviewTypes.ts
index 1b64d41..d436bcd 100644
--- a/app/components/ResultPreview/ResultPreviewTypes.ts
+++ b/app/components/ResultPreview/ResultPreviewTypes.ts
@@ -2,9 +2,12 @@ export interface ResultPreviewProps {
   code: string;
   dependencies?: Record<string, string>;
   onScreenshotCaptured?: (screenshotData: string) => void;
-  initialView?: 'code' | 'preview';
   sessionId?: string;
   isStreaming?: boolean;
+  codeReady?: boolean;
+  activeView: 'code' | 'preview';
+  setActiveView: (view: 'code' | 'preview') => void;
+  onPreviewLoaded: () => void;
 }
 
 export type SandpackFiles = {
diff --git a/app/components/ResultPreview/SandpackContent.tsx b/app/components/ResultPreview/SandpackContent.tsx
index ce4c116..72a5a1b 100644
--- a/app/components/ResultPreview/SandpackContent.tsx
+++ b/app/components/ResultPreview/SandpackContent.tsx
@@ -12,6 +12,7 @@ interface SandpackContentProps {
   activeView: 'preview' | 'code';
   filesContent: SandpackFiles;
   isStreaming: boolean;
+  codeReady: boolean;
   sandpackKey: string;
   setActiveView: (view: 'preview' | 'code') => void;
   setBundlingComplete: (complete: boolean) => void;
@@ -23,12 +24,15 @@ const SandpackContent: React.FC<SandpackContentProps> = ({
   filesContent,
   isStreaming,
   sandpackKey,
+  codeReady,
   setActiveView,
   setBundlingComplete,
   dependencies,
 }) => {
   const codeEditorRef = useRef<HTMLDivElement>(null);
   const [isDarkMode, setIsDarkMode] = useState(false);
+  const previousViewRef = useRef(activeView);
+  const scrollPositionRef = useRef(0);
 
   useEffect(() => {
     const prefersDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
@@ -43,6 +47,34 @@ const SandpackContent: React.FC<SandpackContentProps> = ({
     return () => mediaQuery.removeEventListener('change', handleChange);
   }, []);
 
+  // Handle view changes to preserve scroll position
+  useEffect(() => {
+    if (activeView !== previousViewRef.current) {
+      if (previousViewRef.current === 'code' && codeEditorRef.current) {
+        // Store scroll position when leaving code view
+        const scroller = codeEditorRef.current.querySelector('.cm-scroller');
+        if (scroller instanceof HTMLElement) {
+          scrollPositionRef.current = scroller.scrollTop;
+        }
+      }
+      
+      previousViewRef.current = activeView;
+      
+      if (activeView === 'code') {
+        // Restore scroll position when returning to code view
+        // Use requestAnimationFrame to ensure DOM is ready
+        requestAnimationFrame(() => {
+          if (codeEditorRef.current) {
+            const scroller = codeEditorRef.current.querySelector('.cm-scroller');
+            if (scroller instanceof HTMLElement) {
+              scroller.scrollTop = scrollPositionRef.current;
+            }
+          }
+        });
+      }
+    }
+  }, [activeView]);
+
   return (
     <div data-testid="sandpack-provider">
       <SandpackProvider
@@ -61,7 +93,12 @@ const SandpackContent: React.FC<SandpackContentProps> = ({
         files={filesContent}
         theme={isDarkMode ? 'dark' : 'light'}
       >
-        {isStreaming && <SandpackScrollController isStreaming={isStreaming} />}
+        <SandpackScrollController 
+          isStreaming={isStreaming} 
+          shouldEnableScrolling={isStreaming || !codeReady}
+          codeReady={codeReady}
+          activeView={activeView}
+        />
         <SandpackLayout className="h-full" style={{ height: 'calc(100vh - 49px)' }}>
           <div
             style={{
diff --git a/app/components/ResultPreview/SandpackScrollController.tsx b/app/components/ResultPreview/SandpackScrollController.tsx
index 01581fd..34eea09 100644
--- a/app/components/ResultPreview/SandpackScrollController.tsx
+++ b/app/components/ResultPreview/SandpackScrollController.tsx
@@ -2,25 +2,33 @@ import { useEffect, useRef } from 'react';
 
 interface SandpackScrollControllerProps {
   isStreaming: boolean;
+  shouldEnableScrolling?: boolean;
+  codeReady?: boolean;
+  activeView?: 'preview' | 'code';
 }
 
-const SandpackScrollController: React.FC<SandpackScrollControllerProps> = ({ isStreaming }) => {
-  const lastScrollHeight = useRef(0);
-  const lastScrollPosition = useRef(0);
-  const isScrolling = useRef(false);
-  const hasUserScrolled = useRef(false);
-  const highlightIntervalRef = useRef<NodeJS.Timeout | null>(null);
-
+const SandpackScrollController: React.FC<SandpackScrollControllerProps> = ({ 
+  isStreaming,
+  shouldEnableScrolling = isStreaming, // Default to isStreaming if not provided
+  codeReady = false,
+  activeView = 'preview' // Default to preview view
+}) => {
+  // Simple refs for tracking state
+  const animationFrameRef = useRef<number | null>(null);
+  const isHighlighting = useRef(false);
+  const lastLineRef = useRef<HTMLElement | null>(null);
+  const hasStartedScrolling = useRef(false);
+  
+  // Add the highlight styles regardless of streaming state
   useEffect(() => {
-    let primaryScroller: HTMLElement | null = null;
-
+    // Create highlighting styles if needed
     if (!document.getElementById('highlight-style')) {
       const style = document.createElement('style');
       style.id = 'highlight-style';
       style.textContent = `
         .cm-line-highlighted {
           position: relative !important;
-          border-left: 3px solid rgba(0, 137, 249, 0.27) !important;
+          border-left: 3px solid rgba(0, 137, 249, 0.6) !important;
           color: inherit !important;
         }
         
@@ -31,178 +39,130 @@ const SandpackScrollController: React.FC<SandpackScrollControllerProps> = ({ isS
           left: 0 !important;
           right: 0 !important;
           bottom: 0 !important;
-          background: linear-gradient(60deg, rgba(0, 128, 255, 0.15), rgba(224, 255, 255, 0.25), rgba(0, 183, 255, 0.15)) !important;
-          background-size: 200% 200% !important;
-          animation: sparkleAppear 2s ease-out !important;
+          background: linear-gradient(
+            90deg, 
+            rgba(0, 128, 255, 0.12) 0%, 
+            rgba(224, 255, 255, 0.2) 50%, 
+            rgba(0, 183, 255, 0.12) 100%
+          ) !important;
+          background-size: 200% 100% !important;
+          animation: sparkleFlow 1.8s ease-in-out infinite !important;
           pointer-events: none !important;
           z-index: -1 !important;
         }
         
-        @keyframes sparkleGradient {
-          0% { background-position: 0% 50% }
-          50% { background-position: 100% 50% }
-          100% { background-position: 0% 50% }
-        }
-        
-        @keyframes sparkleAppear {
-          0% { opacity: 0.8; }
-          50% { opacity: 0.8; }
-          100% { opacity: 0.1; }
+        @keyframes sparkleFlow {
+          0% { background-position: 0% 50%; opacity: 0.7; }
+          50% { background-position: 100% 50%; opacity: 0.85; }
+          100% { background-position: 0% 50%; opacity: 0.7; }
         }
       `;
       document.head.appendChild(style);
     }
-
-    const scrollToBottom = () => {
-      if (!primaryScroller) return;
-      isScrolling.current = true;
-
-      requestAnimationFrame(() => {
-        if (primaryScroller) {
-          primaryScroller.scrollTop = primaryScroller.scrollHeight;
-          lastScrollHeight.current = primaryScroller.scrollHeight;
-          lastScrollPosition.current = primaryScroller.scrollTop;
-        }
-        isScrolling.current = false;
-      });
-    };
-
-    const highlightLastLine = () => {
-      if (!primaryScroller || !isStreaming) return;
-
-      document.querySelectorAll('.cm-line-highlighted').forEach((el) => {
-        el.classList.remove('cm-line-highlighted');
-      });
-
-      const lines = Array.from(document.querySelectorAll('.cm-line'));
-      let lastLine = null;
-
-      for (let i = lines.length - 1; i >= 0; i--) {
-        const line = lines[i];
-        const content = line.textContent || '';
-        if (content.trim() && !content.includes('END OF CODE')) {
-          lastLine = line;
-          break;
-        }
-      }
-
-      if (lastLine) {
-        lastLine.classList.add('cm-line-highlighted');
-      }
+    
+    return () => {
+      // We're not removing the style on unmount as other instances may need it
+      // The test will handle cleanup if needed
     };
-
-    const checkForScroller = setInterval(() => {
-      if (primaryScroller) {
-        clearInterval(checkForScroller);
-        return;
+  }, []);
+  
+  // Simple check if we should be scrolling
+  const shouldScroll = () => {
+    return isStreaming && !codeReady && activeView === 'code';
+  };
+  
+  // Main useEffect for scrolling and highlighting in CODE view
+  useEffect(() => {
+    // If we're not in the scrolling state, don't do anything
+    if (!shouldScroll()) {
+      if (animationFrameRef.current) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
       }
-
-      const newScroller = document.querySelector('.cm-scroller');
-      if (newScroller && newScroller instanceof HTMLElement) {
-        primaryScroller = newScroller;
-
-        scrollToBottom();
-
-        setupContentObserver();
+      
+      // Clear any highlighting
+      if (lastLineRef.current) {
+        lastLineRef.current.classList.remove('cm-line-highlighted');
+        lastLineRef.current = null;
       }
-    }, 100);
-
-    const setupContentObserver = () => {
-      if (!primaryScroller) return;
-
-      const contentObserver = new MutationObserver(() => {
-        if (!primaryScroller) return;
-
-        const newHeight = primaryScroller.scrollHeight;
-
-        if (isStreaming) {
-          highlightLastLine();
-        } else {
-          document.querySelectorAll('.cm-line-highlighted').forEach((el) => {
-            el.classList.remove('cm-line-highlighted');
+      
+      isHighlighting.current = false;
+      hasStartedScrolling.current = false;
+      return;
+    }
+    
+    // Combined function to scroll to bottom and highlight the last line
+    const scrollAndHighlight = () => {
+      // Find the editor and scroll it
+      const editorScroller = document.querySelector('.cm-scroller');
+      
+      if (editorScroller instanceof HTMLElement) {
+        // Use triple-nested requestAnimationFrame
+        // First frame prepares for scroll
+        requestAnimationFrame(() => {
+          // Set the scroll position directly
+          editorScroller.scrollTop = editorScroller.scrollHeight;
+          
+          // Second frame ensures elements are rendered
+          requestAnimationFrame(() => {
+            // Try again to make sure we're at the bottom
+            editorScroller.scrollTop = editorScroller.scrollHeight;
+            
+            // Also try scrolling using the last line for redundancy
+            const lines = document.querySelectorAll('.cm-line');
+            if (lines.length > 0) {
+              const lastLine = lines[lines.length - 1] as HTMLElement;
+              
+              // Use scrollIntoView as backup
+              lastLine.scrollIntoView({ block: 'end', behavior: 'auto' });
+              
+              // Highlight the last line
+              if (lastLine !== lastLineRef.current) {
+                // Remove previous highlight
+                if (lastLineRef.current) {
+                  lastLineRef.current.classList.remove('cm-line-highlighted');
+                }
+                
+                // Add highlight to new line
+                lastLine.classList.add('cm-line-highlighted');
+                lastLineRef.current = lastLine;
+              }
+            }
+            
+            // Third frame ensures everything is set
+            requestAnimationFrame(() => {
+              // Final adjustment to ensure we stay at the bottom
+              editorScroller.scrollTop = editorScroller.scrollHeight;
+            });
           });
-        }
-
-        if (newHeight === lastScrollHeight.current) return;
-
-        const isNearBottom =
-          primaryScroller.scrollTop + primaryScroller.clientHeight > lastScrollHeight.current - 100;
-
-        if (!hasUserScrolled.current || isNearBottom) {
-          scrollToBottom();
-        }
-
-        lastScrollHeight.current = newHeight;
-      });
-
-      const handleScroll = () => {
-        if (isScrolling.current || !primaryScroller) return;
-
-        const currentPosition = primaryScroller.scrollTop;
-        if (Math.abs(currentPosition - lastScrollPosition.current) > 10) {
-          hasUserScrolled.current = true;
-          lastScrollPosition.current = currentPosition;
-
-          if (
-            primaryScroller.scrollTop + primaryScroller.clientHeight >=
-            primaryScroller.scrollHeight - 50
-          ) {
-            hasUserScrolled.current = false;
-          }
-        }
-      };
-
-      if (primaryScroller) {
-        contentObserver.observe(primaryScroller, {
-          childList: true,
-          subtree: true,
-          characterData: true,
         });
-
-        primaryScroller.addEventListener('scroll', handleScroll);
-
-        if (isStreaming) {
-          highlightLastLine();
-        }
       }
-
-      if (isStreaming) {
-        highlightIntervalRef.current = setInterval(highlightLastLine, 10);
-      }
-
-      return () => {
-        clearInterval(checkForScroller);
-        if (highlightIntervalRef.current) {
-          clearInterval(highlightIntervalRef.current);
-          highlightIntervalRef.current = null;
-        }
-        contentObserver.disconnect();
-        primaryScroller?.removeEventListener('scroll', handleScroll);
-      };
+      
+      // Continue the animation loop
+      animationFrameRef.current = requestAnimationFrame(scrollAndHighlight);
     };
-
-    setTimeout(scrollToBottom, 100);
-
+    
+    // Start the animation loop
+    if (!hasStartedScrolling.current) {
+      hasStartedScrolling.current = true;
+      animationFrameRef.current = requestAnimationFrame(scrollAndHighlight);
+    }
+    
+    // Cleanup on unmount or when conditions change
     return () => {
-      clearInterval(checkForScroller);
-      if (highlightIntervalRef.current) {
-        clearInterval(highlightIntervalRef.current);
-        highlightIntervalRef.current = null;
+      if (animationFrameRef.current) {
+        cancelAnimationFrame(animationFrameRef.current);
+        animationFrameRef.current = null;
+      }
+      
+      // Clear any highlighting
+      if (lastLineRef.current) {
+        lastLineRef.current.classList.remove('cm-line-highlighted');
+        lastLineRef.current = null;
       }
     };
-  }, [isStreaming]);
-
-  useEffect(() => {
-    if (!isStreaming && highlightIntervalRef.current) {
-      clearInterval(highlightIntervalRef.current);
-      highlightIntervalRef.current = null;
-
-      document.querySelectorAll('.cm-line-highlighted').forEach((el) => {
-        el.classList.remove('cm-line-highlighted');
-      });
-    }
-  }, [isStreaming]);
-
+  }, [isStreaming, codeReady, activeView]);
+  
   return null;
 };
 
diff --git a/app/components/ResultPreview/WelcomeScreen.tsx b/app/components/ResultPreview/WelcomeScreen.tsx
index e63f911..7498c2c 100644
--- a/app/components/ResultPreview/WelcomeScreen.tsx
+++ b/app/components/ResultPreview/WelcomeScreen.tsx
@@ -3,7 +3,7 @@ import React from 'react';
 const WelcomeScreen = () => {
   return (
     <div className="bg-light-background-00 dark:bg-dark-background-00 flex h-full flex-col items-center justify-center">
-      <img src="/lightup.png" alt="Lightup" className="logo-pulse h-auto w-full max-w-xs" />
+      <img src="/lightup.png" alt="Lightup" className="logo-pulse h-auto w-full max-w-xs opacity-10" />
     </div>
   );
 };
diff --git a/app/components/StructuredMessage.tsx b/app/components/StructuredMessage.tsx
index 791cacf..41cdc49 100644
--- a/app/components/StructuredMessage.tsx
+++ b/app/components/StructuredMessage.tsx
@@ -40,7 +40,7 @@ const StructuredMessage = memo(({ segments, isStreaming }: StructuredMessageProp
               return (
                 <div
                   key={`markdown-${index}`}
-                  className="prose prose-sm dark:prose-invert max-w-none prose-ul:pl-5 prose-ul:list-disc prose-ol:pl-5 prose-ol:list-decimal prose-li:my-0"
+                  className="ai-markdown prose"
                 >
                   <ReactMarkdown>{segment.content || ''}</ReactMarkdown>
                 </div>
diff --git a/app/hooks/useSimpleChat.ts b/app/hooks/useSimpleChat.ts
index 32d7546..cdc4361 100644
--- a/app/hooks/useSimpleChat.ts
+++ b/app/hooks/useSimpleChat.ts
@@ -150,6 +150,10 @@ export function useSimpleChat(sessionId: string | undefined): ChatState {
     }
   }, [session._id, database, addScreenshot]);
 
+  const codeReady = useMemo(() => {
+    return !isStreaming || selectedSegments.length > 2;
+  }, [isStreaming, selectedSegments]);
+
   return {
     sessionId: session._id,
     addScreenshot,
@@ -161,6 +165,7 @@ export function useSimpleChat(sessionId: string | undefined): ChatState {
     input: userMessage.text,
     setInput,
     isStreaming,
+    codeReady,
     sendMessage,
     inputRef,
     title: session?.title || '',
diff --git a/app/prompts.ts b/app/prompts.ts
index fa8510c..5a6de78 100644
--- a/app/prompts.ts
+++ b/app/prompts.ts
@@ -43,7 +43,7 @@ If you need any npm dependencies, list them at the start of your response in thi
   "another-package": "version"
 }}
 
-Then provide a brief explanation followed by the component code. The component should demonstrate proper Fireproof integration with real-time updates and proper data persistence. 
+Then provide a title and brief explanation followed by the component code. The component should demonstrate proper Fireproof integration with real-time updates and proper data persistence. Follow it with a longer description of the app's purpose and detailed instructions how to use it (with occasional bold or italic for emphasis). 
 
 Begin the component with the import statements. Use react and use-fireproof:
 
diff --git a/app/routes/home.tsx b/app/routes/home.tsx
index 17fb126..3ad738d 100644
--- a/app/routes/home.tsx
+++ b/app/routes/home.tsx
@@ -1,7 +1,9 @@
-import { useEffect } from 'react';
+import { useEffect, useState, useCallback } from 'react';
 import { useParams, useNavigate, useLocation } from 'react-router';
 import ChatInterface from '../components/ChatInterface';
 import ResultPreview from '../components/ResultPreview/ResultPreview';
+import ChatHeaderContent from '../components/ChatHeaderContent';
+import ResultPreviewHeaderContent from '../components/ResultPreview/ResultPreviewHeaderContent';
 import { useSimpleChat } from '../hooks/useSimpleChat';
 import AppLayout from '../components/AppLayout';
 import { decodeStateFromUrl } from '../utils/sharing';
@@ -19,6 +21,22 @@ export default function UnifiedSession() {
   const navigate = useNavigate();
   const location = useLocation();
   const chatState = useSimpleChat(urlSessionId);
+  
+  // State for view management
+  const [activeView, setActiveView] = useState<'code' | 'preview'>('code');
+  const [previewReady, setPreviewReady] = useState(false);
+  const [bundlingComplete, setBundlingComplete] = useState(true);
+  const [isSidebarVisible, setIsSidebarVisible] = useState(false);
+
+  // Directly create an openSidebar function
+  const openSidebar = useCallback(() => {
+    setIsSidebarVisible(true);
+  }, []);
+
+  // Handle preview loaded event
+  const handlePreviewLoaded = useCallback(() => {
+    setPreviewReady(true);
+  }, []);
 
   useEffect(() => {
     if (chatState.title) {
@@ -43,14 +61,41 @@ export default function UnifiedSession() {
 
   return (
     <AppLayout
-      chatPanel={<ChatInterface {...chatState} />}
+      headerLeft={
+        <ChatHeaderContent 
+          onOpenSidebar={openSidebar} 
+          title={chatState.title || 'New Chat'} 
+        />
+      }
+      headerRight={
+        <ResultPreviewHeaderContent
+          previewReady={previewReady}
+          activeView={activeView}
+          setActiveView={setActiveView}
+          bundlingComplete={bundlingComplete}
+          isStreaming={chatState.isStreaming}
+          code={chatState.selectedCode?.content || ''}
+          dependencies={chatState.selectedDependencies || {}}
+        />
+      }
+      chatPanel={
+        <ChatInterface 
+          {...chatState}
+          isSidebarVisible={isSidebarVisible}
+          setIsSidebarVisible={setIsSidebarVisible}
+        />
+      }
       previewPanel={
         <ResultPreview
           sessionId={chatState.sessionId || ''}
           code={chatState.selectedCode?.content || ''}
           dependencies={chatState.selectedDependencies || {}}
           isStreaming={chatState.isStreaming}
+          codeReady={chatState.codeReady}
           onScreenshotCaptured={chatState.addScreenshot}
+          activeView={activeView}
+          setActiveView={setActiveView}
+          onPreviewLoaded={handlePreviewLoaded}
         />
       }
     />
diff --git a/app/types/chat.ts b/app/types/chat.ts
index f6cef39..7a93ec6 100644
--- a/app/types/chat.ts
+++ b/app/types/chat.ts
@@ -89,6 +89,7 @@ export interface ChatState {
   input: string;
   setInput: (input: string) => void;
   isStreaming: boolean;
+  codeReady: boolean;
   inputRef: React.RefObject<HTMLTextAreaElement | null>;
   sendMessage: () => Promise<void>;
   title: string;
@@ -112,6 +113,7 @@ export interface ChatInterfaceProps {
 export interface SessionSidebarProps {
   isVisible: boolean;
   onClose: () => void;
+  sessionId: string;
 }
 
 export type { GroupedSession };
