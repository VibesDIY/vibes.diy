 app/components/AppLayout.tsx                       |  26 +++-
 app/components/ChatHeader.tsx                      |   2 +-
 app/components/ChatHeaderContent.tsx               |  76 ++++++++++
 app/components/ChatInterface.tsx                   |  63 ++++-----
 app/components/ResultPreview/ResultPreview.tsx     |  34 ++---
 .../ResultPreview/ResultPreviewHeaderContent.tsx   | 155 +++++++++++++++++++++
 .../ResultPreview/ResultPreviewToolbar.tsx         |   2 +-
 app/components/ResultPreview/ResultPreviewTypes.ts |   4 +-
 app/components/ResultPreview/SandpackContent.tsx   |  11 ++
 .../ResultPreview/SandpackScrollController.tsx     | 126 +++++++++++------
 app/routes/home.tsx                                |  48 ++++++-
 app/types/chat.ts                                  |   1 +
 12 files changed, 447 insertions(+), 101 deletions(-)
diff --git a/app/components/AppLayout.tsx b/app/components/AppLayout.tsx
index 7bb7d61..3f7dbb8 100644
--- a/app/components/AppLayout.tsx
+++ b/app/components/AppLayout.tsx
@@ -3,17 +3,35 @@ import type { ReactNode } from 'react';
 interface AppLayoutProps {
   chatPanel: ReactNode;
   previewPanel: ReactNode;
+  headerLeft?: ReactNode;
+  headerRight?: ReactNode;
 }
 
 /**
  * AppLayout - Common layout component for the application
  * Provides consistent structure with 1:3 ratio between chat panel and preview panel
+ * Can optionally render header components above the content panels
  */
-export default function AppLayout({ chatPanel, previewPanel }: AppLayoutProps) {
+export default function AppLayout({ 
+  chatPanel, 
+  previewPanel, 
+  headerLeft, 
+  headerRight 
+}: AppLayoutProps) {
   return (
-    <div className="flex h-dvh overflow-hidden">
-      <div className="flex h-full w-1/3 flex-col">{chatPanel}</div>
-      <div className="relative w-2/3">{previewPanel}</div>
+    <div className="flex h-dvh flex-col overflow-hidden">
+      <div className="flex h-[4rem] w-full border-b border-light-decorative-00 dark:border-dark-decorative-00">
+        <div className="w-1/3 border-light-decorative-00 dark:border-dark-decorative-00">
+          {headerLeft}
+        </div>
+        <div className="w-2/3">
+          {headerRight}
+        </div>
+      </div>
+      <div className="flex flex-1 overflow-hidden">
+        <div className="flex h-full w-1/3 flex-col">{chatPanel}</div>
+        <div className="relative w-2/3">{previewPanel}</div>
+      </div>
     </div>
   );
 }
diff --git a/app/components/ChatHeader.tsx b/app/components/ChatHeader.tsx
index b75e71c..93aaeb2 100644
--- a/app/components/ChatHeader.tsx
+++ b/app/components/ChatHeader.tsx
@@ -10,7 +10,7 @@ function ChatHeader({ onOpenSidebar, title }: ChatHeaderProps) {
   const navigate = useNavigate();
 
   return (
-    <div className="border-light-decorative-00 dark:border-dark-decorative-00 bg-light-background-00 dark:bg-dark-background-00 flex min-h-[4rem] items-center justify-between border-b px-6 py-4">
+    <div className="border-light-decorative-00 dark:border-dark-decorative-00 bg-light-background-00 dark:bg-dark-background-00 flex h-[4rem] items-center justify-between border-b px-6 py-4">
       <div className="flex items-center">
         <button
           type="button"
diff --git a/app/components/ChatHeaderContent.tsx b/app/components/ChatHeaderContent.tsx
new file mode 100644
index 0000000..6d18b9c
--- /dev/null
+++ b/app/components/ChatHeaderContent.tsx
@@ -0,0 +1,76 @@
+import { memo } from 'react';
+
+interface ChatHeaderContentProps {
+  onOpenSidebar: () => void;
+  title: string;
+}
+
+function ChatHeaderContent({ onOpenSidebar, title }: ChatHeaderContentProps) {
+  return (
+    <div className="flex h-full w-full items-center justify-between px-6 py-4">
+      <div className="flex items-center">
+        <button
+          type="button"
+          onClick={onOpenSidebar}
+          className="text-light-primary dark:text-dark-primary hover:text-accent-02-light dark:hover:text-accent-02-dark mr-3"
+          aria-label="Open chat history"
+        >
+          <svg
+            xmlns="http://www.w3.org/2000/svg"
+            className="h-6 w-6"
+            fill="none"
+            viewBox="0 0 24 24"
+            stroke="currentColor"
+            aria-hidden="true"
+          >
+            <path
+              strokeLinecap="round"
+              strokeLinejoin="round"
+              strokeWidth={2}
+              d="M4 6h16M4 12h16M4 18h7"
+            />
+          </svg>
+        </button>
+      </div>
+      <div className="text-light-primary dark:text-dark-primary text-sm">{title}</div>
+      <div className="relative">
+        <button
+          type="button"
+          onClick={() => {
+            document.location = '/';
+          }}
+          className="peer bg-accent-02-light dark:bg-accent-02-dark hover:bg-accent-03-light dark:hover:bg-accent-03-dark flex cursor-pointer items-center justify-center rounded-full p-2.5 text-white transition-colors"
+          aria-label="New Chat"
+          title="New Chat"
+        >
+          <span className="sr-only">New Chat</span>
+          <svg
+            xmlns="http://www.w3.org/2000/svg"
+            className="h-5 w-5"
+            fill="none"
+            viewBox="0 0 24 24"
+            stroke="currentColor"
+            aria-hidden="true"
+          >
+            <path
+              strokeLinecap="round"
+              strokeLinejoin="round"
+              strokeWidth={2}
+              d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
+            />
+          </svg>
+        </button>
+        <span className="pointer-events-none absolute top-full right-0 mt-1 rounded bg-gray-800 px-2 py-1 text-sm whitespace-nowrap text-white opacity-0 transition-opacity peer-hover:opacity-100">
+          New Chat
+        </span>
+      </div>
+    </div>
+  );
+}
+
+// Use React.memo with a custom comparison function to ensure the component only
+// re-renders when its props actually change
+export default memo(ChatHeaderContent, (prevProps, nextProps) => {
+  // Only re-render if title or onOpenSidebar changes
+  return prevProps.onOpenSidebar === nextProps.onOpenSidebar && prevProps.title === nextProps.title;
+}); 
\ No newline at end of file
diff --git a/app/components/ChatInterface.tsx b/app/components/ChatInterface.tsx
index dea3b6c..635dce4 100644
--- a/app/components/ChatInterface.tsx
+++ b/app/components/ChatInterface.tsx
@@ -2,11 +2,15 @@ import { useState, useMemo, useCallback, useRef } from 'react';
 import type { ChangeEvent } from 'react';
 import type { ChatState } from '../types/chat';
 import SessionSidebar from './SessionSidebar';
-import ChatHeader from './ChatHeader';
 import MessageList from './MessageList';
 import ChatInput from './ChatInput';
 import QuickSuggestions from './QuickSuggestions';
 
+interface ChatInterfaceProps extends ChatState {
+  isSidebarVisible: boolean;
+  setIsSidebarVisible: (isVisible: boolean) => void;
+}
+
 function ChatInterface({
   docs: messages,
   input,
@@ -16,24 +20,20 @@ function ChatInterface({
   sendMessage,
   sessionId,
   title,
-}: ChatState) {
+  codeReady,
+  addScreenshot,
+  isSidebarVisible,
+  setIsSidebarVisible,
+}: ChatInterfaceProps) {
   // State for UI transitions and sharing
   const [isShrinking, setIsShrinking] = useState(false);
   const [isExpanding, setIsExpanding] = useState(false);
-  const [isSidebarVisible, setIsSidebarVisible] = useState(false);
   const [selectedResponseId, setSelectedResponseId] = useState<string | null>(null);
 
-  // Convert docs to messages
-  // const messages = useMemo(() => convertDocsToMessages(docs), [docs]);
-
-  // Sidebar visibility functions
-  const openSidebar = useCallback(() => {
-    setIsSidebarVisible(true);
-  }, []);
-
+  // Sidebar visibility function
   const closeSidebar = useCallback(() => {
     setIsSidebarVisible(false);
-  }, []);
+  }, [setIsSidebarVisible]);
 
   // Function to handle input changes
   const handleInputChange = useCallback(
@@ -87,28 +87,29 @@ function ChatInterface({
         setSelectedResponseId={handleSetSelectedResponseId}
       />
     );
-  }, [sessionId, messages, isStreaming, isShrinking, isExpanding, handleSetSelectedResponseId]);
+  }, [messages, isStreaming, isShrinking, isExpanding, handleSetSelectedResponseId]);
 
   return (
-    <div className="flex h-screen flex-col">
-      <ChatHeader onOpenSidebar={openSidebar} title={title} />
-      <div className="flex flex-1 overflow-hidden">
-        <div className="flex w-full flex-1 flex-col">
-          {memoizedMessageList}
-          {messages.length === 0 && (
-            <QuickSuggestions onSelectSuggestion={handleSelectSuggestion} />
-          )}
-          <ChatInput
-            value={input}
-            onChange={handleInputChange}
-            onKeyDown={handleKeyDown}
-            onSend={sendMessage}
-            disabled={isStreaming}
-            inputRef={inputRef}
-          />
-        </div>
+    <div className="flex h-full flex-col overflow-hidden">
+      <div className="flex-grow overflow-y-auto">
+        {memoizedMessageList}
+        {messages.length === 0 && (
+          <QuickSuggestions onSelectSuggestion={handleSelectSuggestion} />
+        )}
       </div>
-      <SessionSidebar isVisible={isSidebarVisible} onClose={closeSidebar} />
+      <ChatInput
+        value={input}
+        onChange={handleInputChange}
+        onKeyDown={handleKeyDown}
+        onSend={sendMessage}
+        disabled={isStreaming}
+        inputRef={inputRef}
+      />
+      <SessionSidebar 
+        isVisible={isSidebarVisible} 
+        onClose={closeSidebar} 
+        sessionId={sessionId || ''} 
+      />
     </div>
   );
 }
diff --git a/app/components/ResultPreview/ResultPreview.tsx b/app/components/ResultPreview/ResultPreview.tsx
index 9df958e..04bb7f9 100644
--- a/app/components/ResultPreview/ResultPreview.tsx
+++ b/app/components/ResultPreview/ResultPreview.tsx
@@ -4,24 +4,24 @@ import type { SandpackFiles } from './ResultPreviewTypes';
 import { indexHtml, animationStyles } from './ResultPreviewTemplates';
 import { processCodeForDisplay } from './ResultPreviewUtils';
 import WelcomeScreen from './WelcomeScreen';
-import ResultPreviewToolbar from './ResultPreviewToolbar';
 import SandpackContent from './SandpackContent';
 
 function ResultPreview({
   code,
   dependencies = {},
   onScreenshotCaptured,
-  initialView = 'code',
   sessionId,
   isStreaming = false,
   codeReady = false,
+  activeView,
+  setActiveView,
+  onPreviewLoaded,
 }: ResultPreviewProps) {
-  const [activeView, setActiveView] = useState<'preview' | 'code'>(initialView);
   const [bundlingComplete, setBundlingComplete] = useState(true);
   const [previewReady, setPreviewReady] = useState(false);
 
   const filesRef = useRef<SandpackFiles>({});
-  const showWelcome = !code || code.length === 0;
+  const showWelcome = !isStreaming && (!code || code.length === 0);
 
   const sandpackKey = useMemo(() => {
     if (showWelcome) return `${sessionId || 'default'}-welcome`;
@@ -30,16 +30,20 @@ function ResultPreview({
 
   useEffect(() => {
     if (isStreaming) {
+      // Reset to code view when streaming starts
       setActiveView('code');
     }
-  }, [isStreaming]); 
+  }, [isStreaming, setActiveView]);
 
   useEffect(() => {
     const handleMessage = ({ data }: MessageEvent) => {
       if (data) {
         if (data.type === 'preview-loaded') {
           setPreviewReady(true);
+          // Automatically switch to preview view when it's ready
           setActiveView('preview');
+          // Notify parent component that preview is loaded
+          onPreviewLoaded();
         } else if (data.type === 'screenshot' && data.data) {
           console.log('ResultPreview: Received screenshot');
           if (onScreenshotCaptured) {
@@ -48,9 +52,12 @@ function ResultPreview({
         }
       }
     };
+
     window.addEventListener('message', handleMessage);
-    return () => window.removeEventListener('message', handleMessage);
-  }, [onScreenshotCaptured]);
+    return () => {
+      window.removeEventListener('message', handleMessage);
+    };
+  }, [onScreenshotCaptured, setActiveView, onPreviewLoaded]);
 
   useEffect(() => {
     if (!showWelcome) {
@@ -66,7 +73,7 @@ function ResultPreview({
   }, [code, showWelcome]);
 
   const previewArea = showWelcome ? (
-    <div className="h-full" style={{ height: 'calc(100vh - 49px)' }}>
+    <div className="h-full">
       <WelcomeScreen />
     </div>
   ) : (
@@ -101,17 +108,6 @@ function ResultPreview({
   return (
     <div className="h-full" style={{ overflow: 'hidden' }}>
       <style>{animationStyles}</style>
-
-      <ResultPreviewToolbar
-        previewReady={previewReady}
-        activeView={activeView}
-        setActiveView={setActiveView}
-        bundlingComplete={bundlingComplete}
-        isStreaming={isStreaming}
-        code={code}
-        dependencies={dependencies}
-      />
-
       {previewArea}
     </div>
   );
diff --git a/app/components/ResultPreview/ResultPreviewHeaderContent.tsx b/app/components/ResultPreview/ResultPreviewHeaderContent.tsx
new file mode 100644
index 0000000..f5a4f2d
--- /dev/null
+++ b/app/components/ResultPreview/ResultPreviewHeaderContent.tsx
@@ -0,0 +1,155 @@
+import React, { useState } from 'react';
+import { copyToClipboard, encodeStateToUrl } from '../../utils/sharing';
+
+interface ResultPreviewHeaderContentProps {
+  previewReady: boolean;
+  activeView: 'preview' | 'code';
+  setActiveView: (view: 'preview' | 'code') => void;
+  bundlingComplete: boolean;
+  isStreaming: boolean;
+  code: string;
+  dependencies?: Record<string, string>;
+}
+
+const ResultPreviewHeaderContent: React.FC<ResultPreviewHeaderContentProps> = ({
+  previewReady,
+  activeView,
+  setActiveView,
+  bundlingComplete,
+  isStreaming,
+  code,
+  dependencies = {},
+}) => {
+  const [shareStatus, setShareStatus] = useState<string>('');
+
+  function handleShare() {
+    if (!code) {
+      alert('Generate an app first before sharing!');
+      return;
+    }
+
+    const encoded = encodeStateToUrl(code, dependencies);
+    if (encoded) {
+      copyToClipboard(`${window.location.origin}/shared?state=${encoded}`);
+      setShareStatus('Share URL copied to clipboard!');
+      setTimeout(() => {
+        setShareStatus('');
+      }, 3000);
+    }
+  }
+
+  const showSwitcher = code.length > 0;
+
+  return (
+    <div className="flex h-full w-full items-center justify-between px-6 py-4">
+      {showSwitcher ? (
+        <div className="bg-light-decorative-00 dark:bg-dark-decorative-00 flex space-x-1 rounded-lg p-1 shadow-sm">
+          <button
+            type="button"
+            disabled={!previewReady}
+            onClick={() => setActiveView('preview')}
+            className={`flex items-center space-x-1.5 rounded-md px-4 py-1.5 text-sm font-medium transition-colors ${
+              activeView === 'preview'
+                ? 'bg-light-background-00 dark:bg-dark-background-00 text-light-primary dark:text-dark-primary shadow-sm'
+                : 'text-light-primary dark:text-dark-primary' +
+                  (previewReady
+                    ? ' hover:bg-light-decorative-01 dark:hover:bg-dark-decorative-01'
+                    : ' cursor-not-allowed opacity-50')
+            }`}
+            aria-label="Switch to preview"
+          >
+            <svg
+              xmlns="http://www.w3.org/2000/svg"
+              className={`h-4 w-4 ${bundlingComplete && !previewReady ? 'animate-spin-slow' : ''}`}
+              fill="none"
+              viewBox="0 0 24 24"
+              stroke="currentColor"
+            >
+              <title>Preview icon</title>
+              <path
+                strokeLinecap="round"
+                strokeLinejoin="round"
+                strokeWidth={2}
+                d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
+              />
+              <path
+                strokeLinecap="round"
+                strokeLinejoin="round"
+                strokeWidth={2}
+                d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
+              />
+            </svg>
+            <span>Preview</span>
+          </button>
+          <button
+            type="button"
+            onClick={() => {
+              setActiveView('code');
+            }}
+            className={`flex items-center space-x-1.5 rounded-md px-4 py-1.5 text-sm font-medium transition-colors ${
+              activeView === 'code'
+                ? 'bg-light-background-00 dark:bg-dark-background-00 text-light-primary dark:text-dark-primary shadow-sm'
+                : 'text-light-primary dark:text-dark-primary hover:bg-light-decorative-01 dark:hover:bg-dark-decorative-01'
+            }`}
+            aria-label="Switch to code editor"
+          >
+            <svg
+              xmlns="http://www.w3.org/2000/svg"
+              className="h-4 w-4"
+              fill="none"
+              viewBox="0 0 24 24"
+              stroke="currentColor"
+            >
+              <title>Code icon</title>
+              <path
+                strokeLinecap="round"
+                strokeLinejoin="round"
+                strokeWidth={2}
+                d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"
+              />
+            </svg>
+            <span>Code</span>
+          </button>
+        </div>
+      ) : (
+        <div className="h-10"></div>
+      )}
+      {code ? (
+        <div className="flex items-center gap-2">
+          {shareStatus && (
+            <span className="text-sm text-green-600 dark:text-green-400">{shareStatus}</span>
+          )}
+          <div className="bg-light-decorative-00 dark:bg-dark-decorative-00 flex space-x-1 rounded-lg p-1 shadow-sm">
+            <button
+              type="button"
+              onClick={handleShare}
+              className="text-light-primary dark:text-dark-primary hover:bg-light-decorative-01 dark:hover:bg-dark-decorative-01 flex items-center space-x-1.5 rounded-md px-4 py-1.5 text-sm font-medium transition-colors"
+              aria-label="Share app"
+            >
+              <svg
+                xmlns="http://www.w3.org/2000/svg"
+                className="h-4 w-4"
+                fill="none"
+                viewBox="0 0 24 24"
+                stroke="currentColor"
+              >
+                <title>Share icon</title>
+                <path
+                  strokeLinecap="round"
+                  strokeLinejoin="round"
+                  strokeWidth={2}
+                  d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"
+                />
+              </svg>
+              <span>Share</span>
+            </button>
+          </div>
+        </div>
+      ) : (
+        <div className="h-10 w-10"></div>
+      )}
+    </div>
+  );
+};
+
+export default ResultPreviewHeaderContent; 
\ No newline at end of file
diff --git a/app/components/ResultPreview/ResultPreviewToolbar.tsx b/app/components/ResultPreview/ResultPreviewToolbar.tsx
index 869ee62..a3d8ac3 100644
--- a/app/components/ResultPreview/ResultPreviewToolbar.tsx
+++ b/app/components/ResultPreview/ResultPreviewToolbar.tsx
@@ -41,7 +41,7 @@ const ResultPreviewToolbar: React.FC<ResultPreviewToolbarProps> = ({
   const showSwitcher = code.length > 0;
 
   return (
-    <div className="border-light-decorative-00 dark:border-dark-decorative-00 bg-light-background-00 dark:bg-dark-background-00 flex min-h-[4rem] items-center justify-between border-b px-6 py-4">
+    <div className="border-light-decorative-00 dark:border-dark-decorative-00 bg-light-background-00 dark:bg-dark-background-00 flex h-[4rem] items-center justify-between border-b px-6 py-4">
       {showSwitcher ? (
         <div className="bg-light-decorative-00 dark:bg-dark-decorative-00 flex space-x-1 rounded-lg p-1 shadow-sm">
           <button
diff --git a/app/components/ResultPreview/ResultPreviewTypes.ts b/app/components/ResultPreview/ResultPreviewTypes.ts
index 934441f..d436bcd 100644
--- a/app/components/ResultPreview/ResultPreviewTypes.ts
+++ b/app/components/ResultPreview/ResultPreviewTypes.ts
@@ -2,10 +2,12 @@ export interface ResultPreviewProps {
   code: string;
   dependencies?: Record<string, string>;
   onScreenshotCaptured?: (screenshotData: string) => void;
-  initialView?: 'code' | 'preview';
   sessionId?: string;
   isStreaming?: boolean;
   codeReady?: boolean;
+  activeView: 'code' | 'preview';
+  setActiveView: (view: 'code' | 'preview') => void;
+  onPreviewLoaded: () => void;
 }
 
 export type SandpackFiles = {
diff --git a/app/components/ResultPreview/SandpackContent.tsx b/app/components/ResultPreview/SandpackContent.tsx
index 4831fb3..f5ebda0 100644
--- a/app/components/ResultPreview/SandpackContent.tsx
+++ b/app/components/ResultPreview/SandpackContent.tsx
@@ -45,6 +45,17 @@ const SandpackContent: React.FC<SandpackContentProps> = ({
     return () => mediaQuery.removeEventListener('change', handleChange);
   }, []);
 
+  // Log the sandpack configuration for debugging
+  useEffect(() => {
+    console.log('Sandpack config:', {
+      key: sandpackKey,
+      dependencies: dependencies,
+      isDarkMode: isDarkMode,
+      filesCount: Object.keys(filesContent).length,
+      firstFile: Object.keys(filesContent)[0]
+    });
+  }, [sandpackKey, dependencies, isDarkMode, filesContent]);
+
   return (
     <div data-testid="sandpack-provider">
       <SandpackProvider
diff --git a/app/components/ResultPreview/SandpackScrollController.tsx b/app/components/ResultPreview/SandpackScrollController.tsx
index 7140286..10bb1a8 100644
--- a/app/components/ResultPreview/SandpackScrollController.tsx
+++ b/app/components/ResultPreview/SandpackScrollController.tsx
@@ -12,6 +12,7 @@ const SandpackScrollController: React.FC<SandpackScrollControllerProps> = ({ isS
   const animationFrameRef = useRef<number | null>(null);
   const isHighlighting = useRef(false);
   const lastLineRef = useRef<HTMLElement | null>(null);
+  const scrollThreshold = useRef(40); // Smaller threshold for more responsive scrolling
 
   useEffect(() => {
     let primaryScroller: HTMLElement | null = null;
@@ -22,7 +23,7 @@ const SandpackScrollController: React.FC<SandpackScrollControllerProps> = ({ isS
       style.textContent = `
         .cm-line-highlighted {
           position: relative !important;
-          border-left: 3px solid rgba(0, 137, 249, 0.4) !important;
+          border-left: 3px solid rgba(0, 137, 249, 0.6) !important; /* Slightly more visible border */
           color: inherit !important;
         }
         
@@ -33,17 +34,22 @@ const SandpackScrollController: React.FC<SandpackScrollControllerProps> = ({ isS
           left: 0 !important;
           right: 0 !important;
           bottom: 0 !important;
-          background: linear-gradient(60deg, rgba(0, 128, 255, 0.15), rgba(224, 255, 255, 0.25), rgba(0, 183, 255, 0.15)) !important;
-          background-size: 200% 200% !important;
-          animation: sparkleFlow 2s ease-in-out infinite !important;
+          background: linear-gradient(
+            90deg, 
+            rgba(0, 128, 255, 0.12) 0%, 
+            rgba(224, 255, 255, 0.2) 50%, 
+            rgba(0, 183, 255, 0.12) 100%
+          ) !important;
+          background-size: 200% 100% !important;
+          animation: sparkleFlow 1.8s ease-in-out infinite !important; /* Slightly faster animation */
           pointer-events: none !important;
           z-index: -1 !important;
         }
         
         @keyframes sparkleFlow {
-          0% { background-position: 0% 50%; opacity: 0.9; }
-          50% { background-position: 100% 50%; opacity: 0.7; }
-          100% { background-position: 0% 50%; opacity: 0.5; }
+          0% { background-position: 0% 50%; opacity: 0.7; }
+          50% { background-position: 100% 50%; opacity: 0.85; } /* Higher peak opacity */
+          100% { background-position: 0% 50%; opacity: 0.7; }
         }
       `;
       document.head.appendChild(style);
@@ -53,55 +59,75 @@ const SandpackScrollController: React.FC<SandpackScrollControllerProps> = ({ isS
       if (!primaryScroller) return;
       isScrolling.current = true;
 
-      // First immediate jump to get close
-      primaryScroller.scrollTop = primaryScroller.scrollHeight;
-      
-      // Then use requestAnimationFrame for smooth final adjustment
+      // Use requestAnimationFrame for smoother scrolling
       requestAnimationFrame(() => {
-        if (primaryScroller) {
-          // Use scrollIntoView for smoother scrolling
-          const lastElement = primaryScroller.lastElementChild;
-          if (lastElement && lastElement instanceof HTMLElement) {
-            lastElement.scrollIntoView({ block: 'end' });
-          } else {
-            primaryScroller.scrollTop = primaryScroller.scrollHeight;
-          }
-          
-          lastScrollHeight.current = primaryScroller.scrollHeight;
-          lastScrollPosition.current = primaryScroller.scrollTop;
+        if (!primaryScroller) {
+          isScrolling.current = false;
+          return;
         }
-        isScrolling.current = false;
+        
+        // First immediate jump to get close
+        primaryScroller.scrollTop = primaryScroller.scrollHeight;
+        
+        // Then use another requestAnimationFrame for smooth final adjustment
+        requestAnimationFrame(() => {
+          if (primaryScroller) {
+            // Use scrollIntoView for smoother scrolling
+            const lastElement = primaryScroller.lastElementChild;
+            if (lastElement && lastElement instanceof HTMLElement) {
+              lastElement.scrollIntoView({ block: 'end', behavior: 'auto' });
+            } else {
+              primaryScroller.scrollTop = primaryScroller.scrollHeight;
+            }
+            
+            lastScrollHeight.current = primaryScroller.scrollHeight;
+            lastScrollPosition.current = primaryScroller.scrollTop;
+          }
+          isScrolling.current = false;
+        });
       });
     };
 
     const highlightLastLine = () => {
       if (!primaryScroller || !isStreaming) return;
 
-      // Remove highlight from previous line if it exists
-      if (lastLineRef.current) {
-        lastLineRef.current.classList.remove('cm-line-highlighted');
-        lastLineRef.current = null;
-      }
+      // Only update if streaming is active
+      if (!isStreaming) return;
 
-      // Find all code lines
+      // Avoid duplicate DOM operations
       const lines = Array.from(document.querySelectorAll('.cm-line'));
       if (lines.length === 0) return;
 
       // Find the last non-empty line
       let lastLine = null;
+      let lastLineIndex = -1;
+
       for (let i = lines.length - 1; i >= 0; i--) {
         const line = lines[i] as HTMLElement;
         const content = line.textContent || '';
         if (content.trim() && !content.includes('END OF CODE')) {
           lastLine = line;
+          lastLineIndex = i;
           break;
         }
       }
 
-      // Apply highlight to the found line
-      if (lastLine) {
+      // Only update DOM if necessary (either no line highlighted or different line needs highlighting)
+      if (lastLine && (lastLineRef.current !== lastLine)) {
+        // Remove highlight from previous line if it exists and is different
+        if (lastLineRef.current) {
+          lastLineRef.current.classList.remove('cm-line-highlighted');
+        }
+        
+        // Apply highlight to the found line
         lastLine.classList.add('cm-line-highlighted');
         lastLineRef.current = lastLine;
+        
+        // If this line is near the bottom, ensure it's visible
+        const isNearEnd = lastLineIndex > lines.length - 5;
+        if (isNearEnd && !hasUserScrolled.current) {
+          scrollToBottom();
+        }
       }
     };
 
@@ -132,9 +158,17 @@ const SandpackScrollController: React.FC<SandpackScrollControllerProps> = ({ isS
     const setupContentObserver = () => {
       if (!primaryScroller) return;
 
-      const contentObserver = new MutationObserver(() => {
+      const contentObserver = new MutationObserver((mutations) => {
         if (!primaryScroller) return;
 
+        // Check if we've had any meaningful content changes
+        const hasContentChanged = mutations.some(mutation => {
+          return mutation.type === 'childList' || 
+                 (mutation.type === 'characterData' && mutation.target.textContent?.trim().length);
+        });
+
+        if (!hasContentChanged) return;
+
         const newHeight = primaryScroller.scrollHeight;
         
         // Always attempt to highlight on content change if streaming
@@ -142,12 +176,15 @@ const SandpackScrollController: React.FC<SandpackScrollControllerProps> = ({ isS
           startHighlighting();
         }
 
-        // More aggressive auto-scrolling during streaming
-        if (newHeight !== lastScrollHeight.current || isStreaming) {
+        // More intelligent auto-scrolling during streaming
+        if (newHeight !== lastScrollHeight.current) {
           const isNearBottom =
-            primaryScroller.scrollTop + primaryScroller.clientHeight > lastScrollHeight.current - 50;
+            primaryScroller.scrollTop + primaryScroller.clientHeight > 
+            lastScrollHeight.current - scrollThreshold.current;
 
-          if (!hasUserScrolled.current || isNearBottom || isStreaming) {
+          // Auto-scroll if user hasn't scrolled up or is near bottom
+          if (!hasUserScrolled.current || isNearBottom || 
+              (isStreaming && primaryScroller.scrollTop > lastScrollPosition.current)) {
             scrollToBottom();
           }
         }
@@ -159,17 +196,22 @@ const SandpackScrollController: React.FC<SandpackScrollControllerProps> = ({ isS
         if (isScrolling.current || !primaryScroller) return;
 
         const currentPosition = primaryScroller.scrollTop;
-        if (Math.abs(currentPosition - lastScrollPosition.current) > 10) {
+        const scrollChange = Math.abs(currentPosition - lastScrollPosition.current);
+        
+        // Detect manual scrolling with more sensitivity
+        if (scrollChange > 5) {
           hasUserScrolled.current = true;
-          lastScrollPosition.current = currentPosition;
-
+          
           // Reset user scroll flag if they've scrolled close to the bottom
-          if (
+          const isAtBottom = 
             primaryScroller.scrollTop + primaryScroller.clientHeight >=
-            primaryScroller.scrollHeight - 50
-          ) {
+            primaryScroller.scrollHeight - scrollThreshold.current;
+            
+          if (isAtBottom) {
             hasUserScrolled.current = false;
           }
+          
+          lastScrollPosition.current = currentPosition;
         }
       };
 
diff --git a/app/routes/home.tsx b/app/routes/home.tsx
index a8cc0fc..3ad738d 100644
--- a/app/routes/home.tsx
+++ b/app/routes/home.tsx
@@ -1,7 +1,9 @@
-import { useEffect } from 'react';
+import { useEffect, useState, useCallback } from 'react';
 import { useParams, useNavigate, useLocation } from 'react-router';
 import ChatInterface from '../components/ChatInterface';
 import ResultPreview from '../components/ResultPreview/ResultPreview';
+import ChatHeaderContent from '../components/ChatHeaderContent';
+import ResultPreviewHeaderContent from '../components/ResultPreview/ResultPreviewHeaderContent';
 import { useSimpleChat } from '../hooks/useSimpleChat';
 import AppLayout from '../components/AppLayout';
 import { decodeStateFromUrl } from '../utils/sharing';
@@ -19,6 +21,22 @@ export default function UnifiedSession() {
   const navigate = useNavigate();
   const location = useLocation();
   const chatState = useSimpleChat(urlSessionId);
+  
+  // State for view management
+  const [activeView, setActiveView] = useState<'code' | 'preview'>('code');
+  const [previewReady, setPreviewReady] = useState(false);
+  const [bundlingComplete, setBundlingComplete] = useState(true);
+  const [isSidebarVisible, setIsSidebarVisible] = useState(false);
+
+  // Directly create an openSidebar function
+  const openSidebar = useCallback(() => {
+    setIsSidebarVisible(true);
+  }, []);
+
+  // Handle preview loaded event
+  const handlePreviewLoaded = useCallback(() => {
+    setPreviewReady(true);
+  }, []);
 
   useEffect(() => {
     if (chatState.title) {
@@ -43,7 +61,30 @@ export default function UnifiedSession() {
 
   return (
     <AppLayout
-      chatPanel={<ChatInterface {...chatState} />}
+      headerLeft={
+        <ChatHeaderContent 
+          onOpenSidebar={openSidebar} 
+          title={chatState.title || 'New Chat'} 
+        />
+      }
+      headerRight={
+        <ResultPreviewHeaderContent
+          previewReady={previewReady}
+          activeView={activeView}
+          setActiveView={setActiveView}
+          bundlingComplete={bundlingComplete}
+          isStreaming={chatState.isStreaming}
+          code={chatState.selectedCode?.content || ''}
+          dependencies={chatState.selectedDependencies || {}}
+        />
+      }
+      chatPanel={
+        <ChatInterface 
+          {...chatState}
+          isSidebarVisible={isSidebarVisible}
+          setIsSidebarVisible={setIsSidebarVisible}
+        />
+      }
       previewPanel={
         <ResultPreview
           sessionId={chatState.sessionId || ''}
@@ -52,6 +93,9 @@ export default function UnifiedSession() {
           isStreaming={chatState.isStreaming}
           codeReady={chatState.codeReady}
           onScreenshotCaptured={chatState.addScreenshot}
+          activeView={activeView}
+          setActiveView={setActiveView}
+          onPreviewLoaded={handlePreviewLoaded}
         />
       }
     />
diff --git a/app/types/chat.ts b/app/types/chat.ts
index 73e32b4..7a93ec6 100644
--- a/app/types/chat.ts
+++ b/app/types/chat.ts
@@ -113,6 +113,7 @@ export interface ChatInterfaceProps {
 export interface SessionSidebarProps {
   isVisible: boolean;
   onClose: () => void;
+  sessionId: string;
 }
 
 export type { GroupedSession };
