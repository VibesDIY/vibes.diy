name: Deploy Hosting Worker
description: Deploy the vibes.diy hosting worker to Cloudflare

inputs:
  environment:
    description: "Environment to deploy to (dev, production, preview)"
    required: true
    default: "production"
  worker_name:
    description: "Name of the worker to deploy to"
    required: false
    default: ""
  CLOUDFLARE_API_TOKEN:
    description: "Cloudflare API token for deployment"
    required: true
  CLOUDFLARE_ACCOUNT_ID:
    description: "Cloudflare account ID"
    required: true
  SERVER_OPENROUTER_API_KEY:
    description: "OpenRouter API key for AI chat completions"
    required: true
  OPENAI_API_KEY:
    description: "OpenAI API key for image generation and chat"
    required: true
  ANTHROPIC_API_KEY:
    description: "Anthropic API key for Claude chat (optional)"
    required: false
  DISCORD_WEBHOOK_URL:
    description: "Discord webhook URL for notifications (optional)"
    required: false
  BLUESKY_APP_PASSWORD:
    description: "Bluesky app password for social posting (optional)"
    required: false

runs:
  using: composite
  steps:
    - name: Install dependencies
      shell: bash
      run: pnpm install

    - name: Run hosting CI checks
      shell: bash
      run: |
        echo "üèóÔ∏è Running comprehensive hosting CI pipeline..."
        pnpm hosting:check

    - name: Deploy to Cloudflare Workers
      shell: bash
      run: |
        cd hosting/pkg
        echo "üöÄ Deploying to ${{ inputs.environment }} environment..."

        if [ -n "${{ inputs.worker_name }}" ]; then
          # Custom worker name for preview deployments
          if [ "${{ inputs.environment }}" == "preview" ]; then
            echo "üìù Deploying preview with custom worker name..."
            npx wrangler deploy --name "${{ inputs.worker_name }}"
          else
            npx wrangler deploy --env ${{ inputs.environment }}
          fi
        else
          npx wrangler deploy --env ${{ inputs.environment }}
        fi

        echo "‚úÖ Worker deployed successfully"

        # Set output for worker URL based on environment and custom name
        if [ -n "${{ inputs.worker_name }}" ]; then
          echo "worker_url=https://${{ inputs.worker_name }}.workers.dev" >> $GITHUB_OUTPUT
        elif [ "${{ inputs.environment }}" == "production" ]; then
          echo "worker_url=https://vibes-hosting-v2.workers.dev" >> $GITHUB_OUTPUT
        else
          echo "worker_url=https://vibes-hosting-dev.workers.dev" >> $GITHUB_OUTPUT
        fi
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.CLOUDFLARE_ACCOUNT_ID }}

    - name: Configure worker secrets
      shell: bash
      run: |
        cd hosting/pkg

        echo "üîê Setting required API secrets..."

        # Determine secret deployment target
        if [ -n "${{ inputs.worker_name }}" ]; then
          SECRET_TARGET="--name ${{ inputs.worker_name }}"
        else
          SECRET_TARGET="--env ${{ inputs.environment }}"
        fi

        # Required AI API keys
        echo "${{ inputs.SERVER_OPENROUTER_API_KEY }}" | npx wrangler secret put SERVER_OPENROUTER_API_KEY $SECRET_TARGET
        echo "${{ inputs.OPENAI_API_KEY }}" | npx wrangler secret put OPENAI_API_KEY $SECRET_TARGET

        echo "‚úÖ Required secrets configured"

        # Optional Anthropic key
        if [ -n "${{ inputs.ANTHROPIC_API_KEY }}" ]; then
          echo "üîê Setting Anthropic API key..."
          echo "${{ inputs.ANTHROPIC_API_KEY }}" | npx wrangler secret put ANTHROPIC_API_KEY $SECRET_TARGET
        else
          echo "‚ÑπÔ∏è  Anthropic API key not provided (optional - Claude endpoints will be disabled)"
        fi

        # Optional secrets
        if [ -n "${{ inputs.DISCORD_WEBHOOK_URL }}" ]; then
          echo "üîê Setting Discord webhook..."
          echo "${{ inputs.DISCORD_WEBHOOK_URL }}" | npx wrangler secret put DISCORD_WEBHOOK_URL $SECRET_TARGET
        else
          echo "‚ÑπÔ∏è  Discord webhook not provided (optional)"
        fi

        if [ -n "${{ inputs.BLUESKY_APP_PASSWORD }}" ]; then
          echo "üîê Setting Bluesky credentials..."
          echo "${{ inputs.BLUESKY_APP_PASSWORD }}" | npx wrangler secret put BLUESKY_APP_PASSWORD $SECRET_TARGET
        else
          echo "‚ÑπÔ∏è  Bluesky password not provided (optional)"
        fi

        echo "‚úÖ All secrets configured successfully"
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.CLOUDFLARE_ACCOUNT_ID }}

    - name: Upload KV assets
      shell: bash
      run: |
        cd hosting/pkg

        echo "üì¶ Uploading static assets to KV store..."

        # Upload favicon and babel assets
        pnpm kv:put-svg:remote || echo "‚ö†Ô∏è  SVG upload failed, continuing..."
        pnpm kv:put-ico:remote || echo "‚ö†Ô∏è  ICO upload failed, continuing..."
        pnpm kv:put-babel:remote || echo "‚ö†Ô∏è  Babel upload failed, continuing..."

        echo "‚úÖ Asset upload completed"
      env:
        CLOUDFLARE_API_TOKEN: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.CLOUDFLARE_ACCOUNT_ID }}

    - name: Deployment summary
      shell: bash
      run: |
        echo ""
        echo "üéâ Deployment Summary"
        echo "===================="

        if [ -n "${{ inputs.worker_name }}" ]; then
          echo "‚úÖ Worker: ${{ inputs.worker_name }}"
          echo "üåê Worker URL: https://${{ inputs.worker_name }}.workers.dev"
        else
          echo "‚úÖ Worker: vibes-hosting-v2"
          echo "üåê Worker URL: https://vibes-hosting-v2.workers.dev"
        fi

        echo "üîß Environment: ${{ inputs.environment }}"
        echo ""

        if [ "${{ inputs.environment }}" == "preview" ]; then
          echo "üîç Preview Deployment:"
          echo "- This is a temporary preview environment"
          echo "- No custom domains attached"
          echo "- Will be automatically cleaned up when PR is closed"
          echo "- Test all functionality at the worker URL above"
        elif [ "${{ inputs.environment }}" == "production" ]; then
          echo "üîÑ Production Deployment - Next Steps:"
          echo "1. Test the worker URL above"
          echo "2. Update domain routes in Cloudflare Dashboard:"
          echo "   - vibesdiy.work (test first)"
          echo "   - vibecode.garden"
          echo "   - vibes-diy-api.com" 
          echo "   - vibesdiy.app (production last)"
          echo "3. Monitor error rates and performance"
          echo "4. Keep old worker as backup for 30 days"
        else
          echo "üß™ Development/Manual Deployment:"
          echo "- Test at the worker URL above"
          echo "- This deployment is for testing purposes"
        fi
