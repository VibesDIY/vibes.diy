{
  "slug": "immense-shrimp-9469",
  "title": "Funky Reality Distortion",
  "name": "Funky Reality Distortion",
  "code": "import React, { useState, useEffect } from \"react\";\nimport { useFireproof } from 'use-fireproof';\nimport { callAI } from 'call-ai';\n\nexport default function App() {\n  const { useLiveQuery, database } = useFireproof(\"reality-distortion-db\");\n  const { docs: phrases } = useLiveQuery(\"type\", { key: \"distortion\", descending: true });\n  const [topic, setTopic] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [displayed, setDisplayed] = useState({});\n  const [error, setError] = useState(\"\");\n  const [speechSupported, setSpeechSupported] = useState(false);\n  const [speaking, setSpeaking] = useState(\"\");\n  const [currentWordIndex, setCurrentWordIndex] = useState(-1);\n  \n  useEffect(() => {\n    if ('speechSynthesis' in window) {\n      setSpeechSupported(true);\n    }\n    \n    return () => {\n      if (window.speechSynthesis) {\n        speechSynthesis.cancel();\n      }\n    };\n  }, []);\n  \n  const speakTextWordByWord = (text, id) => {\n    if (!speechSupported || speaking === id) return;\n    speechSynthesis.cancel();\n    const words = text.split(/\\s+/);\n    setSpeaking(id);\n    setCurrentWordIndex(0);\n    \n    const speakWord = (word, index) => {\n      if (index >= words.length) {\n        setSpeaking(\"\");\n        setCurrentWordIndex(-1);\n        return;\n      }\n      \n      const utterance = new SpeechSynthesisUtterance(word);\n      utterance.pitch = 0.8 + Math.random() * 0.6;\n      utterance.rate = 0.7 + Math.random() * 0.6;\n      utterance.volume = 0.8 + Math.random() * 0.2;\n      \n      utterance.onend = () => {\n        setCurrentWordIndex(index + 1);\n        speakWord(words[index + 1], index + 1);\n      };\n      \n      utterance.onerror = () => {\n        setSpeaking(\"\");\n        setCurrentWordIndex(-1);\n      };\n      \n      speechSynthesis.speak(utterance);\n    };\n    \n    speakWord(words[0], 0);\n  };\n  \n  async function generatePhrases(e) {\n    e.preventDefault();\n    if (!topic.trim()) return;\n    \n    setLoading(true);\n    setError(\"\");\n    \n    try {\n      const gen = await callAI(\n        `Create 3 funky, bold claims about '${topic}' in the style of Steve Jobs' \"reality distortion field\". Each phrase should be inspirational and future-focused. Give as JSON: phrases: [{claim, impact}] where claim is the bold statement and impact is how it will change everything.`,\n        {\n          stream: true,\n          schema: {\n            properties: {\n              phrases: {\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  properties: {\n                    claim: { type: \"string\" },\n                    impact: { type: \"string\" },\n                  },\n                },\n              },\n            },\n          },\n        }\n      );\n      \n      let final = \"\";\n      for await (const part of gen) final = part;\n      \n      const json = JSON.parse(final);\n      await Promise.all(\n        (json.phrases || []).map((p) =>\n          database.put({\n            ...p,\n            type: \"distortion\",\n            topic,\n            createdAt: Date.now(),\n          })\n        )\n      );\n      \n      setTopic(\"\");\n    } catch (err) {\n      setError(\"Failed to generate statements. Try again!\");\n    }\n    \n    setLoading(false);\n  }\n\n  const addDemoData = async () => {\n    setLoading(true);\n    \n    const demo = [\n      { \n        claim: \"This radical product will change how we see technology forever.\", \n        impact: \"Everyone will question what they thought was possible.\", \n        topic: \"Future Tech\" \n      },\n      { \n        claim: \"We're creating a whole new language for digital interaction.\", \n        impact: \"Communication barriers will dissolve between humans and machines.\", \n        topic: \"Interface Design\" \n      },\n      { \n        claim: \"This is the most insanely great thing we've ever built.\", \n        impact: \"It will make everything else seem obsolete overnight.\", \n        topic: \"Innovation\" \n      },\n    ];\n    \n    for (const p of demo) {\n      await database.put({\n        ...p,\n        type: \"distortion\",\n        createdAt: Date.now(),\n      });\n    }\n    \n    setLoading(false);\n  };\n\n  function toggleDisplay(p) {\n    const id = p._id;\n    const isDisplayed = displayed[id];\n    \n    if (isDisplayed) {\n      speakTextWordByWord(p.claim, id);\n    } else {\n      speakTextWordByWord(p.impact, id);\n    }\n    \n    setDisplayed(prev => ({ ...prev, [id]: !prev[id] }));\n  }\n\n  function handleDelete(id) {\n    database.del(id);\n  }\n\n  function renderSpeakingText(text, docId) {\n    if (speaking !== docId || currentWordIndex === -1) {\n      return <span>{text}</span>;\n    }\n    \n    const words = text.split(/\\s+/);\n    return (\n      <span>\n        {words.map((word, index) => (\n          <span \n            key={index} \n            className={currentWordIndex === index ? \"bg-[#e9ff70] font-black animate-pulse\" : \"\"}\n            style={currentWordIndex === index ? {textShadow: \"1px 1px 0px #242424\"} : {}}\n          >\n            {word}{' '}\n          </span>\n        ))}\n      </span>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen p-4\" style={{\n      backgroundColor: \"#ffffff\",\n      backgroundImage: \"radial-gradient(#ff70a6 2px, transparent 2px), radial-gradient(#70d6ff 2px, transparent 2px)\",\n      backgroundSize: \"30px 30px\",\n      backgroundPosition: \"0 0, 15px 15px\"\n    }}>\n      <div className=\"max-w-2xl mx-auto py-6\">\n        <div className=\"mb-8 border-4 border-[#242424] bg-white shadow-lg p-6 flex flex-col items-center gap-4\">\n          <h1 className=\"text-3xl font-black text-[#242424] mb-2 text-center\">\n            FUNKY REALITY DISTORTION\n          </h1>\n          \n          <p className=\"text-base text-[#242424] font-medium max-w-md text-center italic\">\n            <span className=\"font-bold\">*Create visionary statements with a funky twist!*</span>  \n            <br />\n            Enter any topic to generate bold claims. Click cards to hear each word spoken with a unique voice.\n            <br />\n            <span className=\"text-[#ff70a6] font-bold\">Each word gets its own voice - weird and wonderful!</span>\n          </p>\n          \n          <form className=\"flex gap-2 w-full max-w-md\" onSubmit={generatePhrases}>\n            <input\n              className=\"flex-1 p-3 border-4 border-[#242424] focus:outline-none bg-white\"\n              placeholder=\"Enter funky topic\"\n              disabled={loading}\n              value={topic}\n              onChange={e => setTopic(e.target.value)}\n            />\n            <button\n              type=\"submit\"\n              className=\"bg-[#242424] text-white px-4 py-1 font-bold border-4 border-[#242424] hover:bg-[#70d6ff] hover:text-[#242424]\"\n              disabled={loading}\n            >\n              {loading ? \"...\" : \"GET FUNKY\"}\n            </button>\n          </form>\n          \n          <button\n            className=\"px-4 py-2 border-4 border-[#242424] bg-white font-bold text-[#242424] hover:bg-[#e9ff70]\"\n            onClick={addDemoData}\n            disabled={loading}\n          >\n            DEMO FUNK\n          </button>\n          \n          {error && <div className=\"text-[#ff70a6] font-bold p-2\">{error}</div>}\n          \n          {!speechSupported && (\n            <div className=\"text-[#242424] bg-white p-2 border-2 border-[#242424] text-sm italic\">\n              Speech synthesis not available - no funk for you!\n            </div>\n          )}\n        </div>\n        \n        <div className=\"grid gap-4\">\n          {phrases.length === 0 ? (\n            <div className=\"text-center font-bold text-xl text-[#242424] bg-white p-4 border-4 border-[#242424]\">\n              GET FUNKY WITH SOME STATEMENTS!\n            </div>\n          ) : (\n            phrases.map((p) => (\n              <div\n                key={p._id}\n                className=\"relative border-4 border-[#242424] shadow-lg flex flex-col cursor-pointer hover:scale-[1.01]\"\n                onClick={() => toggleDisplay(p)}\n                style={{\n                  background: displayed[p._id] ? \"#70d6ff\" : \"#ffffff\",\n                  transition: \"all 0.3s ease\"\n                }}\n              >\n                <button\n                  onClick={e => { e.stopPropagation(); handleDelete(p._id); }}\n                  className=\"absolute top-2 right-2 text-white bg-[#242424] border-2 border-[#242424] w-8 h-8 flex items-center justify-center font-bold hover:bg-[#ff70a6] z-10\"\n                >Ã—</button>\n                \n                {speaking === p._id && (\n                  <div className=\"absolute top-2 left-2 bg-[#242424] text-white px-2 py-1 text-xs font-bold\">\n                    FUNKING OUT\n                  </div>\n                )}\n                \n                <div className=\"w-full flex-1 p-6\">\n                  {displayed[p._id] ? (\n                    <>\n                      <div className=\"text-xs font-bold mb-2 bg-[#242424] text-white px-2 py-1 inline-block\">IMPACT</div>\n                      <p className=\"text-center font-medium text-lg text-[#242424]\">\n                        \"{renderSpeakingText(p.impact, p._id)}\"\n                      </p>\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"text-xs font-bold mb-2 bg-[#242424] text-white px-2 py-1 inline-block\">FUNKY CLAIM</div>\n                      <p className=\"text-center font-black text-xl text-[#242424]\">\n                        \"{renderSpeakingText(p.claim, p._id)}\"\n                      </p>\n                    </>\n                  )}\n                  <div className=\"mt-3 text-xs bg-[#e9ff70] px-2 py-1 font-bold border-2 border-[#242424] inline-block\">\n                    {p.topic}\n                  </div>\n                </div>\n                \n                <div className=\"w-full text-center text-xs text-white font-bold bg-[#242424] p-2 flex items-center justify-center\">\n                  {displayed[p._id] ? \"CLICK FOR FUNKY CLAIM\" : \"CLICK FOR FUNKY IMPACT\"}\n                  {speechSupported && (\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 ml-2 animate-pulse\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z\" />\n                    </svg>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}",
  "hasScreenshot": true,
  "userId": "test-user"
}
