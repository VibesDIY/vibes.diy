name: Deploy Hosting Worker

on:
  # PR preview deployments
  pull_request:
    paths:
      - "hosting/**/*"
    types: [opened, synchronize, reopened]

  # Production deployment on main
  push:
    paths:
      - "hosting/**/*"
    branches:
      - main

  # Manual trigger for controlled deployments
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - dev
          - preview

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'pull_request' && 'preview' || github.event_name == 'push' && 'production' || github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup runtime environment
        uses: ./actions/runtime

      - name: Determine deployment type
        id: deployment
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "type=preview" >> $GITHUB_OUTPUT
            echo "worker_name=vibes-hosting-pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "environment=preview" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "type=production" >> $GITHUB_OUTPUT  
            echo "worker_name=vibes-hosting-v2" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "type=manual" >> $GITHUB_OUTPUT
            echo "worker_name=vibes-hosting-v2" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy hosting worker
        id: deploy
        uses: ./hosting/actions/deploy
        with:
          environment: ${{ steps.deployment.outputs.environment }}
          worker_name: ${{ steps.deployment.outputs.worker_name }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          SERVER_OPENROUTER_API_KEY: ${{ secrets.SERVER_OPENROUTER_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          BLUESKY_APP_PASSWORD: ${{ secrets.BLUESKY_APP_PASSWORD }}

      - name: Comment on PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const workerUrl = `https://${{ steps.deployment.outputs.worker_name }}.workers.dev`;
            const body = `## ðŸš€ Preview Deployment Ready

            Your hosting changes have been deployed to a preview environment:

            **ðŸ”— Preview URL**: ${workerUrl}

            ### Test the changes:
            - API endpoints are accessible at the preview URL  
            - Authentication system is active
            - AI services are connected with production keys
            - All security fixes are applied

            ### What's deployed:
            - Worker: \`${{ steps.deployment.outputs.worker_name }}\`
            - Environment: \`${{ steps.deployment.outputs.environment }}\`
            - Commit: \`${{ github.event.pull_request.head.sha }}\`

            The preview will automatically update when you push new commits to this PR.`;

            // Check if comment already exists
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.data.find(comment => 
              comment.body.includes('Preview Deployment Ready'));

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
